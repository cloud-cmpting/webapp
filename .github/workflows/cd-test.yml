name: Packer Build CI

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Packer Build CI

    runs-on: ubuntu-latest

    env:
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}

    strategy:
      matrix:
        node-version: [21.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # - name: Setup MySQL
    #   run: |
    #     sudo /etc/init.d/mysql start
    #     mysql -h ${{secrets.MYSQL_HOST}} --port 3306 -u${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -e "CREATE DATABASE ${{ secrets.MYSQL_DATABASE }};"

    # - name: Install Dependencies
    #   run: npm ci

    # - name: Run Integration Tests
    #   run: npm test

    # - name: Drop DB
    #   run: mysql -h ${{secrets.MYSQL_HOST}} --port 3306 -u${{secrets.MYSQL_USER}} -p${{secrets.MYSQL_PASSWORD}} -e "DROP DATABASE ${{ secrets.MYSQL_DATABASE }};"

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    - name: Build application artifact (.zip)
      run: npm run build

    # - name: Packer Init
    #   run: packer init packer/packer.pkr.hcl

    # - name: Packer Build
    #   run: packer build -force -var "credentials_file=$GOOGLE_APPLICATION_CREDENTIALS" -var "project_id=${{ secrets.GCP_PROJECT_ID }}" packer/packer.pkr.hcl

    - name: Create new Instance Template
      run: |
        MYSQL_HOST_GCP=$(gcloud secrets versions access latest --secret="mysql-host-secret")
        MYSQL_PASSWORD_GCP=$(gcloud secrets versions access latest --secret="mysql-password-secret")
        VM_DISK_KEY_GCP=$(gcloud secrets versions access latest --secret="vm-disk-key-secret")

        gcloud compute instance-templates create instance-template-${{ github.run_id }} \
            --machine-type=e2-standard-2 \
            --instance-template-region=us-east1 \
            --region=us-east1 \
            --create-disk="image=packer-img-with-cloud-db,auto-delete=yes,boot=yes,type=pd-ssd,size=40GB,kms-key=$VM_DISK_KEY_GCP" \
            --network-interface="network=network1,subnet=webapp" \
            --service-account=vm-service-account@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/pubsub \
            --metadata=startup-script="#!/bin/bash

        echo \"Starting startup script...\"

        sudo sh -c  \"cat << EOF > /opt/app/.env
        MYSQL_HOST=$MYSQL_HOST_GCP
        MYSQL_USER=webapp
        MYSQL_PASSWORD=$MYSQL_PASSWORD_GCP
        MYSQL_DATABASE=webapp
        EOF\"

        echo \"Startup script executed successfully!\""

    - name: Update Managed Instance Group
      run: |
        gcloud compute instance-groups managed set-instance-template instance-group-manager --template=projects/${{ secrets.GCP_PROJECT_ID }}/regions/us-east1/instanceTemplates/instance-template-${{ github.run_id }} --region=us-east1

    - name: Start a Basic Rolling Update
      run: |
        gcloud compute instance-groups managed rolling-action start-update instance-group-manager --version=template=projects/${{ secrets.GCP_PROJECT_ID }}/regions/us-east1/instanceTemplates/instance-template-${{ github.run_id }} --region=us-east1

    - name: Monitor Rolling Update
      run: |
        gcloud compute instance-groups managed wait-until instance-group-manager --stable --region=us-east1